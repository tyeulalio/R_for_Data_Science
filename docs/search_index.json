[["chapter-11-data-import.html", "Chapter 11 Chapter 11: Data Import 11.1 Skip section 11.2 Getting Started", " Chapter 11 Chapter 11: Data Import 11.1 Skip section 11.2 Getting Started Here well learn how to load flat files in R with the readr package, which is part of the core tidyverse. Most of readrs functions are concerned with turning flat files into data frames: read_csv() reads comma delimited files read_csv2() reads semicolon separated files read_tsv() reads tab delimited files read_delim() reads in files with any delimiter read_fwf() reads fixed width files. You can specify fields either by their widths with fwf_widths() or their position with fwf_positions(). read_table() reads a common variation of fixed width files where columns are separated by white space. read_log() reads Apache style log files. The first argument to read_csv() is the path to the file to read. # heights &lt;- read_csv(&quot;data/heights.csv&quot;) You can also supply an inline csv file. This is useful for experimenting with readr and for creating reproducible examples to share with others: read_csv(&quot;a,b,c 1,2,3, 4,5,6&quot;) ## Warning: 1 parsing failure. ## row col expected actual file ## 1 -- 3 columns 4 columns literal data ## # A tibble: 2 x 3 ## a b c ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 3 ## 2 4 5 6 In both cases, read_csv() uses the first line of the data for column names, which is a very common convention. There are two cases where you might want to tweak this behavior: Sometimes there are a few lines of metadata at the top of the file. You can use skip = n to skip the first n lines; or use comment = \"#\" to drop all lines that start with (e.g.) #. read_csv(&quot;The first line of metadata The second line of metadata x,y,z 1,2,3&quot;, skip=2) ## # A tibble: 1 x 3 ## x y z ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 3 read_csv(&quot;# a comment to skip, x,y,z 1,2,3&quot;, comment = &#39;#&#39;) ## # A tibble: 1 x 3 ## x y z ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 3 The data might not have column names. You can use col_names = FALSE to tell read_csv() not to treat the first row as headings, and instead label them sequentially from X1 to Xn: read_csv(&quot;1,2,3\\n4,5,6&quot;, col_names=FALSE) ## # A tibble: 2 x 3 ## X1 X2 X3 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 3 ## 2 4 5 6 Alternatively, you can pass col_names a character vector which will be used as the column names: read_csv(&quot;1,2,3\\n4,5,6&quot;, col_names=c(&#39;x&#39;, &#39;y&#39;, &#39;z&#39;)) ## # A tibble: 2 x 3 ## x y z ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2 3 ## 2 4 5 6 Another option that commonly needs tweaking is na: this specifies the value (or values) that are used to represent missing values in your file: read_csv(&quot;a,b,c\\n1,2,.&quot;, na=&#39;.&#39;) ## # A tibble: 1 x 3 ## a b c ## &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 1 2 NA This is all you need to know to read ~75% of CSV files that youll encounter in practice. You can easily adapt what youve learned to read tab separated files with read_tsv() and fixed width files with read_fwf(). "]]
